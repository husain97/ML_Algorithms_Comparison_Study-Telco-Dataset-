# -*- coding: utf-8 -*-
"""ML_Algorithms_Comparison_Study(Telco Dataset).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VI1HYrwwdPdnNpbiUsAm5pA3FdEWRg1O
"""

#IMPORTING DATASET
import pandas as pd
import numpy as np
from google.colab import files
uploaded = files.upload()

#CONVERTING THE CATEGORICAL INPUTS TO NUMERIC INPUTS - PROCESSING DATA 
data_pd = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv', index_col=False)
df = data_pd
for col_name in df.columns:
    if(df[col_name].dtype == 'object'):
        df[col_name]= df[col_name].astype('category')
        df[col_name] = df[col_name].cat.codes

features_cols = ['customerID', 'gender', 'SeniorCitizen', 'Partner', 'Dependents',
       'tenure', 'PhoneService', 'MultipleLines', 'InternetService',
       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',
       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',
       'PaymentMethod', 'MonthlyCharges', 'TotalCharges']

#FEATURES AND LABELS
X = df[features_cols]
Y = df.Churn

#PREPARING TRAINING DATASET AND TEST DATASET
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=1)

import time

#GAUSSIAN(NB) NAIVE BAYES
start = time.time()
from sklearn.naive_bayes import GaussianNB
from sklearn import metrics
gaussianNB = GaussianNB()
gaussianNB.fit(X_train, Y_train)
Y_pred_gnb = gaussianNB.predict(X_test)
acc_score_gnb = round(metrics.accuracy_score(Y_test,Y_pred_gnb) * 100)
confusion_gnb = metrics.confusion_matrix(Y_test,Y_pred_gnb)
end = time.time()
proc_time_gnb = end - start
#print("Total execution time: {}".format(proc_time_gnb), "seconds")

#K-NEAREST NEIGHBORS(KNN)
start = time.time()
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=7)
knn.fit(X_train, Y_train)
Y_pred_knn = knn.predict(X_test)
acc_score_knn = round(metrics.accuracy_score(Y_test,Y_pred_knn) * 100)
confusion_knn = metrics.confusion_matrix(Y_test,Y_pred_knn)
end = time.time()
proc_time_knn = end - start

#DECISION TREE CLASSIFIER - UNPRUNDED TREE
from sklearn.tree import DecisionTreeClassifier
start = time.time()
dtc_unpruned = DecisionTreeClassifier()
dtc_unpruned.fit(X_train, Y_train)
Y_pred_dtc_unpruned = dtc_unpruned.predict(X_test)
acc_score_dtc_unpruned = round(metrics.accuracy_score(Y_test,Y_pred_dtc_unpruned) * 100)
confusion_dtc_unpruned = metrics.confusion_matrix(Y_test,Y_pred_dtc_unpruned)
end = time.time()
proc_time_dtc_unpruned = end - start

#DECISION TREE CLASSIFIER - PRUNDED TREE
start = time.time()
dtc_pruned = DecisionTreeClassifier(criterion='entropy', max_depth=3)
dtc_pruned.fit(X_train, Y_train)
Y_pred_dtc_pruned = dtc_pruned.predict(X_test)
acc_score_dtc_pruned = round(metrics.accuracy_score(Y_test,Y_pred_dtc_pruned) * 100)
confusion_dtc_pruned = metrics.confusion_matrix(Y_test,Y_pred_dtc_pruned)
end = time.time()
proc_time_dtc_pruned = end - start

#SUPPORT VECTOR MACHINES - KERNEL : SIGMOID
start = time.time()
from sklearn import svm
svm_model_sig = svm.SVC(kernel='sigmoid', gamma='auto')
svm_model_sig.fit(X_train, Y_train)
Y_pred_svm_sig = svm_model_sig.predict(X_test)
acc_score_svm_sig = round(metrics.accuracy_score(Y_test,Y_pred_svm_sig) * 100)
confusion_svm_sig = metrics.confusion_matrix(Y_test,Y_pred_svm_sig)
end = time.time()
proc_time_svm_sig = end - start

#SUPPORT VECTOR MACHINES - KERNEL : RBF
start = time.time()
svm_model_rbf = svm.SVC(kernel='rbf', gamma='auto')
svm_model_rbf.fit(X_train, Y_train)
Y_pred_svm_rbf = svm_model_rbf.predict(X_test)
acc_score_svm_rbf = round(metrics.accuracy_score(Y_test,Y_pred_svm_rbf) * 100)
confusion_svm_rbf = metrics.confusion_matrix(Y_test,Y_pred_svm_rbf)
end = time.time()
proc_time_svm_rbf = end - start

#DISPLAYING EVALUATION REPORTS
print('+--------------------+-----------------+------------+-------------------------------------------+----------------------------------------+------------------------------------+--------------------------------+')
print('| METRICS\ALGORITHMS |  GAUSSIAN(NB)   |  KNN(N=7)  | DECISION TREE CLASSIFIER(UNPRUNDED TREE)  | DECISION TREE CLASSIFIER(PRUNDED TREE) |  SUPPORT VECTOR MACHINES - SIGMOID |  SUPPORT VECTOR MACHINES - RBF |')
print('+--------------------+-----------------+------------+-------------------------------------------+----------------------------------------+------------------------------------+--------------------------------+')
print('| ACCURACY           |  ', acc_score_gnb,'%        |  ', acc_score_knn, '%   |                 ', acc_score_dtc_unpruned, '%                   |              ', acc_score_dtc_pruned, '%                   |             ',acc_score_svm_sig, '%                |             ',acc_score_svm_rbf, '%            |')
print('| EXEC. TIME         |  ', round(proc_time_gnb, 3),'s       |  ', round(proc_time_knn, 3), 's  |                 ', round(proc_time_dtc_unpruned, 3), 's                  |              ', round(proc_time_dtc_pruned, 3), 's                  |             ',round(proc_time_svm_sig, 3), 's               |             ',round(proc_time_svm_rbf, 3), 's            |')
print('+--------------------+-----------------+------------+-------------------------------------------+----------------------------------------+------------------------------------+--------------------------------+')

#DISPLAYING CONFUSION MATRIX FOR EACH ALGORITHM
print('+------------------------------------+')
print("| CONFUSION MATRIX : GAUSSIAN NB  |")
print(confusion_gnb)
print('+------------------------------------+')
print("| CONFUSION MATRIX : KNN          |")
print(confusion_knn)
print('+------------------------------------+')
print("| CONFUSION MATRIX : DCT - UNPRUNDED |")
print(confusion_dtc_unpruned)
print('+------------------------------------+')
print("| CONFUSION MATRIX : DCT - UNPRUNDED |")
print(confusion_dtc_pruned)
print('+------------------------------------+')
print("| CONFUSION MATRIX : SVM - SIGMOID   |")
print(confusion_svm_sig)
print('+------------------------------------+')
print("| CONFUSION MATRIX : SVM - RBF       |")
print(confusion_svm_rbf)
print('+------------------------------------+')