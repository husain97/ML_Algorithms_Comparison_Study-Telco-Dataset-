# -*- coding: utf-8 -*-
"""GaussainNB(Telco Dataset).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jmJyw7uJDmEVrqnvv_cTCdjn1veGOG1y
"""

import pandas as pd
import numpy as np
from google.colab import files
uploaded = files.upload()

data_pd = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv', index_col=False)
#data_pd.head()

#Feature Selection using Recursive Feature Elimination
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression
data = data_pd.values
from sklearn import preprocessing
le = preprocessing.LabelEncoder()
X = data[:,0:20]
Y = data[:,20]
for i in range(20):
  X[:,i] = le.fit_transform(X[:,i])

y = le.fit_transform(Y)

model = LogisticRegression(solver='lbfgs', max_iter=1000)
rfe = RFE(model, 3)
fit = rfe.fit(X, Y)
print("Num Features: %d" % fit.n_features_)
print("Selected Features: %s" % fit.support_)
print("Feature Ranking: %s" % fit.ranking_ )

print(list(data_pd))

#PREPROCESSING CUSTOMERID DATA
from sklearn import preprocessing
le1 = preprocessing.LabelEncoder()
customerid = data_pd['customerID']
#print("Unique Values:",customerid.unique())

customerid_encoded = le1.fit_transform(customerid)
print("Unique Values Encoded:",np.unique(customerid_encoded))

customerid_decoded = list(le1.inverse_transform(customerid_encoded))
print("Unique Values Decoded:",np.unique(customerid_decoded))

#PREPROCESSING ONLINESECURITY DATA
#print(customerid_encoded)
from sklearn import preprocessing
le2 = preprocessing.LabelEncoder()
onlineSecurity = data_pd['OnlineSecurity']
print("Unique Values:",onlineSecurity.unique())

onlineSecurity_encoded = le2.fit_transform(onlineSecurity)
print("Unique Values Encoded:",np.unique(onlineSecurity_encoded))

onlineSecurity_decoded = list(le2.inverse_transform(onlineSecurity_encoded))
print("Unique Values Decoded:",np.unique(onlineSecurity_decoded))

#PREPROCESSING CONTRACT DATA
#print(customerid_encoded)
#print(onlineSecurity_encoded)
from sklearn import preprocessing
le3 = preprocessing.LabelEncoder()
contract = data_pd['Contract']
print("Unique Values:",contract.unique())

contract_encoded = le3.fit_transform(contract)
print("Unique Values Encoded:",np.unique(contract_encoded))

contract_decoded = list(le3.inverse_transform(contract_encoded))
print("Unique Values Decoded:",np.unique(contract_decoded))

#PREPROCESSING PAPERLESSBILLING DATA
#print(customerid_encoded)
#print(onlineSecurity_encoded)
#print(contract_encoded)
from sklearn import preprocessing
le4 = preprocessing.LabelEncoder()
paperless = data_pd['PaperlessBilling']
print("Unique Values:",paperless.unique())

paperless_encoded = le4.fit_transform(paperless)
print("Unique Values Encoded:",np.unique(paperless_encoded))

paperless_decoded = list(le4.inverse_transform(paperless_encoded))
print("Unique Values Decoded:",np.unique(paperless_decoded))

#PREPROCESSING CHURN DATA
#print(customerid_encoded)
#print(onlineSecurity_encoded)
#print(contract_encoded)
#print(paperless_encoded)
from sklearn import preprocessing
le5 = preprocessing.LabelEncoder()
churn = data_pd['Churn']
print("Unique Values:",churn.unique())

churn_encoded = le5.fit_transform(churn)
print("Unique Values Encoded:",np.unique(churn_encoded))

churn_decoded = list(le5.inverse_transform(churn_encoded))
print("Unique Values Decoded:",np.unique(churn_decoded))

#PACKAGING FEATURES TOGETHER
#print(customerid_encoded)
#print(onlineSecurity_encoded)
#print(contract_encoded)
#print(paperless_encoded)
#print(churn_encoded)

#Combining features AS Tuples
features = list(zip(customerid_encoded, onlineSecurity_encoded, contract_encoded, paperless_encoded))
print("Training Dataset:",features[0:10])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(features, churn_encoded, test_size=0.3, random_state=109)

#CREATING AND TRAINING THE MODEL
print("Training Dataset:",X_train[0:100])

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train, y_train)
print("Model Trained!")

#Predicting Rental Prices
predicted = model.predict(X_test)
print(predicted)

#Decode the predicted output
predicted_decoded = le5.inverse_transform(predicted)
print(predicted_decoded)

from sklearn import metrics
print("Accuracy:",(round(metrics.accuracy_score(y_test,predicted) * 100)), "%")

print(X_train)